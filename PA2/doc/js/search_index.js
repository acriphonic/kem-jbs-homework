var search_data = {"index":{"searchIndex":["movie","moviedata","movietest","viewer","add_movie()","add_rating()","avg_rating()","get_avgrating()","get_id()","get_movies()","get_viewers()","load_data()","mean()","most_similar()","movie_id()","movies()","new()","new()","new()","new()","popularity()","popularity()","popularity_list()","predict()","rating()","rms()","run_test()","similarity()","stddev()","to_a()","to_s()","to_s()","viewers()","readme"],"longSearchIndex":["movie","moviedata","movietest","viewer","viewer#add_movie()","movie#add_rating()","viewer#avg_rating()","movie#get_avgrating()","viewer#get_id()","viewer#get_movies()","movie#get_viewers()","moviedata#load_data()","movietest#mean()","moviedata#most_similar()","movie#movie_id()","moviedata#movies()","movie::new()","moviedata::new()","movietest::new()","viewer::new()","movie#popularity()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#to_a()","movie#to_s()","viewer#to_s()","moviedata#viewers()",""],"info":[["Movie","","Movie.html","",""],["MovieData","","MovieData.html","",""],["MovieTest","","MovieTest.html","",""],["Viewer","","Viewer.html","",""],["add_movie","Viewer","Viewer.html#method-i-add_movie","(movie, rating)","<p>allows movie ratings to be updated\n"],["add_rating","Movie","Movie.html#method-i-add_rating","(viewer, rating)","<p>allows movie ratings to be updated\n"],["avg_rating","Viewer","Viewer.html#method-i-avg_rating","()","<p>returns average movie rating\n"],["get_avgrating","Movie","Movie.html#method-i-get_avgrating","()","<p>accessor method\n"],["get_id","Viewer","Viewer.html#method-i-get_id","()","<p>accessor method\n"],["get_movies","Viewer","Viewer.html#method-i-get_movies","()","<p>accessor method\n"],["get_viewers","Movie","Movie.html#method-i-get_viewers","()","<p>accessor method\n"],["load_data","MovieData","MovieData.html#method-i-load_data","()","<p>processes file to create necessary data structures\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>returns average prediction error\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u)","<p>returns a list of the top 5 most similar users based on similarity method\n"],["movie_id","Movie","Movie.html#method-i-movie_id","()","<p>accessor method\n"],["movies","MovieData","MovieData.html#method-i-movies","(u)","<p>returns an array of movies a user has watched\n"],["new","Movie","Movie.html#method-c-new","(movie_id)","<p>constructor\n"],["new","MovieData","MovieData.html#method-c-new","(filepath, fileset = nil)","<p>constructor\n"],["new","MovieTest","MovieTest.html#method-c-new","(testarray)","<p>constructor\n"],["new","Viewer","Viewer.html#method-c-new","(user_id)","<p>constructor\n"],["popularity","Movie","Movie.html#method-i-popularity","()","<p>accessor method\n"],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>returns the popularity of a given movie\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()","<p>popularity in this context is a combined weighting of ratings and views a\nmovie that has been seen 500 …\n"],["predict","MovieData","MovieData.html#method-i-predict","(u, m)","<p>prediction algorithm\n"],["rating","MovieData","MovieData.html#method-i-rating","(u, m)","<p>returns the rating a user gave a movie\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>returns the root mean square error of prediction\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k = nil)","<p>runs prediction tests of k items\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","<p>similarity in this context means “likelihood of going to a movie together”\nthis method defines …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>returns standard deviation of the error\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>returns an array of the predictions in the form [u,m,r,p]\n"],["to_s","Movie","Movie.html#method-i-to_s","()","<p>override to string\n"],["to_s","Viewer","Viewer.html#method-i-to_s","()","<p>overrides to string\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m)","<p>returns all viewers of a given movie\n"],["README","","ml-100k/README.html","","<p>SUMMARY &amp; USAGE LICENSE\n<p>\n<p>MovieLens data sets were collected by the GroupLens Research Project at the\n…\n"]]}}